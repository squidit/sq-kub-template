name: 'Update and apply kubernetes configuration files'
description: 'Update kubernetes configuration yamls and apply them to the current cluster'
author: 'software.com'
branding:
  icon: upload-cloud
  color: blue
inputs:
  resources-name:
    description: 'Name for the kubernetes resources related'
    required: true
  replicas-count:
    description: 'Number of instances of pods (if cronjob replica count is 1, default)'
    required: false
  liveness-probe:
    description: 'Endpoint to set liveness probe (if not set, liveness probe will not be defined)'
    required: false
  readiness-probe:
    description: 'Endpoint to set readiness probe (if not set, readiness probe will not be defined)'
    required: false
  min-ready-seconds:
    description: 'Number of seconds to wait until pod is ready (default 10)'
    required: false
    default: '10'
  priority-class-name:
    description: 'Name of priority class (if not set, priority class will not be defined)'
    required: false
  has-credentials-volume:
    description: 'Boolean to check if volume mount has to be set (if not set, volume mount will not be defined)'
    required: false
  envs-from-configmaps:
    description: 'List of configmaps (delimiter is whitespace)'
    required: true
  envs-from-secrets:
    description: 'List of secrets (delimiter is whitespace)'
    required: true
  resource-request-cpu:
    description: 'Value for request cpu for container in kubernetes node (if not set, request cpu will not be defined)'
    required: false
  resource-request-memory:
    description: 'Value for request memory for container in kubernetes node (if not set, request memory will not be defined)'
    required: false
  resource-limit-cpu:
    description: 'Value for limit cpu for container in kubernetes node (if not set, limit cpu will not be defined)'
    required: false
  resource-limit-memory:
    description: 'Value for limit memory for container in kubernetes node (if not set, limit memory will not be defined)'
    required: false
  autoscalling-trigger:
    description: 'Name of metric to trigger autoscalling (if not set, autoscalling will not be applied)'
    required: false
  autoscalling-target-value:
    description: 'Target for average value to trigger metric in autoscalling (if not set, autoscalling will not be applied)'
    required: false
  autoscalling-max-pods:
    description: 'Max of pods in autoscalling (if not set, autoscalling will not be applied) (min pods is equal replica count)'
    required: false
  ingress-domain:
    description: 'Domain to set rule in Ingress resource (if not set, Ingress and Service wil not be applied)'
    required: false
  ingress-annotations:
    description: 'List of annotations to add to Ingress (delimiter is whitespace)'
    required: false
  cronjob-configmap:
    description: 'Name of configmap to read crontab and start command (if not set, Cronjob will not be applied)'
    required: false
  cronjob-list:
    description: 'List of cronjobs to apply (delimiter is whitespace) (the same name set here is the name to match in cronjob-configmap)'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Check if Deployment or Configmap
      id: check-if-deployment-or-configmap
      run: |-
        echo ${{ inputs.cronjob-configmap }}
        echo ${{ inputs.cronjob-list }}
        type_resource="deployment"
        if [ ${{ inputs.cronjob-configmap }} != "" ] && [ ${{ inputs.cronjob-list }} != "" ]; then
          type_resource="cronjob"
          echo "Resource is a Cronjob - Ingress and Servie will not be applied"
        fi
        echo "::set-output name=type_resource::$type_resource"

    # - name: Get current namespace
    #   id: get-original-namespace
    #   run: |
    #     current_namespace=$(kubectl config view --minify -o jsonpath="{..namespace}")
    #     current_namespace=${current_namespace:-"default"}
    #     echo "::set-output name=namespace::$current_namespace"
    #   shell: bash
    # - name: Set namespace
    #   run: kubectl config set-context --current --namespace ${{ inputs.namespace }}
    #   shell: bash
    # - name: Substitute variables and apply files
    #   run: |
    #     envsubst_arg=''
    #     if [ ${{ inputs.replacement-method }} = "defined" ]; then
    #       envsubst_arg="$(perl -e 'print "\$$_" for grep /^[_a-zA-Z]\w*$/, keys %ENV')"
    #     elif [ ${{ inputs.replacement-method }} = "list" ]; then
    #       list=(${{ inputs.env-replacement-list }})
    #       for env in "${list[@]}"; do
    #         envsubst_arg+="\${$env}"
    #       done
    #     fi
    #     k8_files=(${{ inputs.k8-config-file-paths }})
    #     for file in "${k8_files[@]}"; do
    #       template=`cat $file | envsubst $envsubst_arg`
    #       echo "$template"
    #       echo "$template" | kubectl apply -f -
    #     done
    #   shell: bash
    # - name: Set namespace to original value
    #   run: kubectl config set-context --current --namespace ${{ steps.get-original-namespace.outputs.namespace }}
    #   shell: bash


# TODO:
# - receber deployment e parametros para montar o deploy
# - receber ingress e parametros para montar o deploy
# - receber service true ou false
# - receber autoscalling e parametros para montar o deploy
# - receber cronjobs e parametros para montar o deploy
# - receber configmaps de lista de nomes
# - receber secrets de lista de nomes
# - se tiver credentials verificar se o secret existe
# - se tiver lista de secrets verificar se o secret existe
# - se tiver lista de configmaps verificar tem mais de uma env (NODE_ENV) (opção de bypass nessa validação)
# - se tiver cronjobs pegar crontab de configmap por parametro